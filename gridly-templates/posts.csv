"Post Name","Cover Image",Title,Description,Author,Tags,Content,"Is Top?","Publish Date"
games-as-a-service,"https://www.gridly.com//upload-data/games-as-a-service.jpg","What is Games-as-a-Service: all you need to know about the most recent trend 
in the games industry","What is Games as a Service, pros and cons of games on-demand, and
  how to successfully manage live service games","Slava Zaiets",Development;Localization,"Games-as-a-Service (GaaS) is a big-league trend in the games industry that already tripled the industry value. Subscription-based gaming is on the rise and cloud gaming growth is [expected](https://markets.businessinsider.com/news/stocks/cloud-gaming-market-size-worth-7-24-billion-by-2027-cagr-47-9-grand-view-research-inc-1029507996#) to reach USD 7.24 billion by 2027. But what makes Games-as-a-Service so popular? And what are the pitfalls for the game devs who decide to develop GaaS titles? Let's dig into the details.

### What is Games-as-a-Service?

Games-as-a-Service (GaaS) is a business model that allows game developers to monetize video games after release in the long run. It's achieved by the games being updated frequently with new experiences and offered to the players on a subscription basis or in the form of in-game purchases.

Sometimes, GaaS gaming is used irreplaceably with ""cloud gaming,"" ""gaming on demand,"" ""live service games"" or ""game streaming"" since the majority of the video games played nowadays are stored and run on the remote servers and streamed to the gamers' devices. 

### What is the main difference between traditional video games and Games-as-a-Service?

Traditional games are typically a single ship release, based on a pay-to-play business model. As the Games-as-a-Service definition suggests, the video games are ""served"" to the players rather than sold once.

A game as a service is published once and updated afterward regularly, often weekly. These updates can include new events, missions, areas, levels, modes, assets, etc. Their game monetization model is based on microtransactions. As a result, instead of passing all the levels at once and abandoning the game, players have a reason to get back to the same title regularly. 

### Which game companies employed the GaaS model

Probably, the earliest games-as-a-service example includes an MMO World of Warcraft, released by Blizzard Entertainment in 2004. With a monthly subscription of $14.99, in 2015 the game had 5.5 million active subscribers and generated $82 million a year. This revenue stream allowed the company to enhance the game with constant content updates.

Amongst the best games as a service are Destiny, Hunt: Showdown, Overwatch, Madden, and Candy Crush. Fortnite by Epic Games can be considered as a game as a service too, even though it's a free-to-play game. The studio generates revenue from the microtransactions: cosmetic add-ons (animations, costumes, accessories), unique features (""Battle Pass""), and so on. In less than a year after its release, Fortnite had 125 million gamers and made $1.2 billion in revenue.

In 2018, Ubisoft [announced](https://venturebeat.com/2018/02/12/ubisoft-plans-to-make-fewer-games-after-a-decade-of-annual-releases/) that the company would move towards GaaS as this model is less dependent on the new releases. Instead, they will focus on post-release support and building and developing the community around these titles.

#### The benefits and hindrances of video game services for players

For the gamers, playing GaaS titles means that they can split the payments (not to pay upfront) and, thus, try more games with the same budget. 

The risks are mainly associated with the game discontinuation, unavailable updates, and support even if they like the game (however, this is a rare case).

### What are the pros and cons of the Games-as-a-Service business model?

From the game dev industry perspective, maintaining and supporting Games-as-a-Service has several advantages and disadvantages. As user acquisition costs have skyrocketed, user retention is key to game success. To keep players and users around developers are managing their games as services and constantly evolve their product.

Games on demand have some obvious advantages for the game developers:

#### Benefits of Games-as-a-Service

* **Earlier release.** No need to develop the game for years before it's finally launched. Instead, the game developers can get feedback early, and tweak their project according to the audience’s comments and wishes.
* **Continuous revenue stream.** Game development studios and indie developers are less dependent on the one-time purchase. Instead, they may plan for the long-term monetization strategy.
* **The extended life span of the game.** With more games appearing on the market every day, users tend to drop games easier. According to some estimates, most users drop mobile apps within three days. Without regular updates, the games get bored easier and download something new. On the contrary, the longer the users play the game, the higher chances are they convert into loyal customers. GaaS business model helps game developers build long-term relationships with their audience and prolong the game lifespan.

The disadvantages of the GaaS model for game studios are as follows:

#### Challenges of Games-as-a-Service

* **Constant updates are needed, sometimes every week.** Thus, it's important to keep the track of updates and make sure that the content is not changed by unauthorized users. Not to mention that the game updates should be pushed out to the game in multiple languages at the same time.
* **Harder to manage multilingual content**. Development, localization, QA, and marketing involve a lot of stakeholders who need to work simultaneously on the in-game and out-game content. Agile localization workflows and procedures are essential.
* **Shorter production and QA cycle.** Bugs, errors, and edits are common, and it's important to keep the data in one place as a single source of truth.
* **Community building.** Games-as-a-Service are dependent on their users and require a higher level of user engagement. Thus, it's important to have a team that would communicate with the gamers, collect feedback, notify them about updates, etc. 

### The life cycle of the game subscription services

 <div class=""columns is-centered"">

<center>

![Games as a service life cycle illustration](/upload-data/gaas-life-cycle.jpg ""Games-as-a-service life cycle"")

**Image: The GaaS development cycle. Source: gridly.com**

</center>

</div>

The development cycle of Games-as-a-Service consists of the following steps:

1. The initial release of the game
2. Analysis of the user behavior and monetization
3. Changes to the gameplay mechanics as the reaction of the users' feedback
4. Tweak of the in-game offers (e.g. A/B tests of the game assets)
5. Creation of the new content
6. Localization & QA of the updated content 
7. Publishing of the game updates

This cycle leads to a spinning wheel of updates, which moves faster and faster, especially for the developers on a weekly release schedule. Managing these big updates under tight deadlines can be problematic and should be done in a [collaborative CMS](https://www.gridly.com/blog/what-is-headless-cms/) or another tool capable of accommodating various types of text, structured, and gameplay data.

#### Are GaaS video games a trend or a fad?

Since Games-as-a-Service have been with us for over a decade, one may say that they are going to stay for a long time. The streaming games trend is anticipated to continue with the development of 5G when even advanced games can be played on devices with low computing power.

Furthermore, leading game publishers started cooperating with telecommunication companies to ""deliver cloud gaming services globally."" For example, Microsoft partners with the largest mobile operator in South Korea, SKT, to expand its Xbox’s cloud gaming service to Asian players. Thus, we may expect that more and more developers will select GaaS as their preferable business model.",true,2020-11-08T17:00:00Z
what-is-headless-cms,"https://www.gridly.com//upload-data/headless-cms-gridly.jpg","Headless CMS explained: why development teams love it","More industries dealing with frequent multilingual updates prefer
  headless content management systems","Ted Hagos",Development,"Headless CMSes are getting more attention every year, and more tools appear on the market, including Gridly. But why is it so popular? What are the advantages of headless CMS over the traditional one and why its usage goes way beyond the web content? We'll explain in a minute.

### What is a CMS?

A CMS (Content Management System), as its name suggests, is what you use to manage digital content. It’s an umbrella term for quite a few applications: Document Management Systems, Digital Asset Management, Web Content Management.

The DMS and the DAM are mostly for enterprise applications. When people talk about a content management system, most likely, they refer to a web CMS - a web application that lets you create and manage content, generally via a WYSIWYG (what you see is what you get) tool. The content is saved in a database (typically MySQL) and then displayed using a front-end application that’s also a part of the CMS.

The web CMS has a couple more subsets, these are the following;

* coupled (traditional) CMS,
* decoupled CMS,
* headless CMS.

### Traditional (coupled) CMS

There are many CMS applications out there; but I bet you’ve heard of the [top three](https://bit.ly/3inVvMR) - Drupal, Joomla, and WordPress that together take over 68% share of all installed CMSes.

The top three CMSes are more similar than they are different. Each of them lets a user create and edit their content using a visual tool which is part of the CMS. This content is stored on a back-end database and displayed using a front-end application (which is also part of the CMS). The diagram below shows the logical architecture of a CMS.

This is the traditional CMS; the authoring, storing, and rendering of the content happens all in one place. For most people and most use-cases, the monolithic nature of a traditional CMS isn’t an issue, as long as you conform to the CMSes world-view on how the content should be rendered. JavaScript and CSS go a long way to customize how the content looks and feels during rendering, but they can only go so far.

Although there are already many CMS apps, that didn’t stop some people from building more CMSes, this new breed of CMSes is fundamentally different from their traditional counterparts regarding how it does the authoring, storing, and rendering workflow.

### What is headless CMS?

There are many headless CMS definitions, but this is probably the simplest. If you think of a CMS as a body, the place where the “rendering” happens is the head. By this analogy, a headless CMS is one that only lets you author and store the content but doesn’t care about the rendering part. It has no front-end delivery system.

### How headless CMS works

How does it deliver the content then? It provides the content as data over API (Application Programming Interface), more specifically, via RESTful APIs, and because it’s data, it can be consumed any which way you want. Using a headless architecture, you can flexibly get the content so you can better integrate with other applications. How this usually happens is you send a web request to an API endpoint, which is like visiting a web page, but instead of getting a web page, you typically get a JSON response like this.

```json
{
  ""_createdAt"": ""2020-10-26T11:21:26A"",
  ""_id"": ""XXXXXX"",
  ""_type"": ""company"",
  ""logo"": {
    ""_type"": ""image"",
    ""asset"": {
      ""_ref"": ""image-3ced3a-gridly-logo-svg"",
      ""_type"": ""reference""
    }
  },
  ""slug"": {
    ""_type"": ""slug"",
    ""current"": ""gridly""
  },
  ""title"": ""gridly.com""
}
```

You can now build a front-end system that can consume this data.

### What is an API-first CMS?

You might encounter the term “API-first” CMS or “API-based” CMS; they are just other terms for headless CMS terms. It’s emphasizing the fact that they only deliver the content via an API and nothing else.

The rise of the flexible CMSes prompted the vendors of existing CMSes to catch up. They built APIs over their existing products; these CMSes became known as decoupled CMSes.

### Headless vs Decoupled CMS

By definition, a decoupled CMS is a traditional CMS that has an API layer over its data. It can deliver the content either as a web page (aided by its front-end delivery system) or as data over API, much like a headless CMS. Because it’s a traditional CMS, decoupled CMS architecture still has all the goodies for authoring, previewing, and rendering content.

![](https://lh5.googleusercontent.com/jqLnzHeaTNkvtTgmvvjUSwc3ZHD7QmBY_u7NA1p3S5RZxQKgNbvnnaRnA2VV6utbAck4AR67aF7eXbsFAi6haFjvkyb3z-z1saZ8KsEVfzuQzTXo9QnGx92kSVTGbfElO8P0iGIb)

### Pros and Cons of a headless CMS

There are plenty of reasons to choose a headless CMS over a traditional one; here are some pros and cons.

#### CONS

* The tech stack is fragmented. If you remove the head, you have to replace it with something else, which can mean hunting for another solution to render the front-end or build it in-house. It will impact both your timeline and your budget.
* You can’t preview the content.

#### PROS

* It's front-end agnostic. You can choose whatever front-end toolchain you prefer.
* You can change or add front-end delivery systems without impacting the content’s source of truth. It’s future-proof.
* Better integration with other solutions. You can use the data for other applications, not just displaying web pages; for example, you can also use the CMS for games to store game and user data.

### How to use headless CMS beyond blogs, news and landing pages

While CMSes are usually in the province of blogs, news, cooking sites, and marketing applications, it finds new homes with the game development folks. Game development requires storing a tremendous amount of structured data, like user levels, user achievements, leaderboard, how many bananas or gems have been collected, etc.

Game data about the player, points, etc., used to reside on a database that sits on the same location where the game is installed; then, it is somehow synchronized over a central database.

That was then; the games now have a lot more data than merely player data and points; now, we also have to deal with in-app purchases, game pricing, localization and downloadable contents (DLC). Storing this game data in a central location seems to be an architecturally sound design. The central location becomes a single source of truth for the game. This is why game companies are starting to consider the use of game CMSes.

### Why use a game development CMS

There was a time in game development history when making a video game entailed that the textual data for the app is typically bundled in a link library. Can you imagine what a nightmare it would be to translate that game? How much effort it would take to produce games? It means creating a build script for each language/locale that the game has to support.

Incorporating localization as part of game development, rather than an afterthought, has several advantages:

* It cuts both testing and development time by a lot. Storing the textual data outside the game executables is a leap-frog move forward.
* It makes localization much more manageable. Moving the textual data into a CMS is even better; because it can now support a multi-regional team. You can prevent confusion (and friction) among team members by having a single truth source for the game data.
* Your development teams (even your vendors) have 24-7 access to the most updated version of the game data. Gone are the days when you had to prepare the game data and send it to your vendor (who’s most likely from another country) then wait for the localized game data. Now, localization, development, and testing personnel have real-time access to game data.

Games can be monetized beyond only charging a one-time sticker price. Game makers can now charge for in-app purchases and DLCs. The DLCs, like new worlds, maps, or characters can make the game fresh long after it has been released. This continuing revenue model for games is known as [games-as-a-service (GaaS)](https://www.gridly.com/blog/games-as-a-service/).

GaaS games require constant updates to game data; surely, you don’t want to store this on a local database. You will need a game CMS to support this model.

GaaS games are relatively new, and so are CMSes that support them. Unlike traditional CMSes, there aren’t that many game CMSes, but they already exist.

Meet Gridly, a headless CMS for multilingual game development.

Want to learn more? [Get started with headless](https://app.gridly.com/getstarted) right now (it's free) or [schedule a demo](https://localizedirect.agilecrm.com/calendar/chris_detyna,dolly,markus,tim_farvadeev,edwin_caparaz) for a brief introduction.",false,
,,,,,,,false,
,,,,,,,false,
,,,,,,,false,
